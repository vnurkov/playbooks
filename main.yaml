---
- name: py minikube
  hosts: localhost
  collections:
      - kubernetes.core
  gather_facts: False

#ansible-galaxy collection install community.kubernetes
#ansible-galaxy collection install cloud.common

  vars:

    ansible_python_interpreter: '{{ ansible_playbook_python }}'
    image_name: hello-py
    image_tag: 1.0
    replicas: 2

  pre_tasks:

    - name: check the status of minikube.
      command: minikube status
      register: minikube_status
      changed_when: false
      ignore_errors: true

    - name: start minikube if it's not running.
      command: minikube start --driver = docker
      when: "not minikube_status.stdout or 'Running' not in minikube_status.stdout"

  tasks:

    - name: get existing image hash.
      shell: |
        eval $(minikube docker-env)
        docker images -q {{ image_name }}
      register: image_hash
      changed_when: false

    - name: build image if it's not already built. 
      shell: | 
        eval $(minikube docker-env)
        docker build -t {{ image_name }}:{{ image_tag }} .
      when: not image_hash.stdout

    - name: Create a deployment for Hello Py.
      k8s:
        state: present
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: hello-py
            namespace: default
          spec:
            replicas: "{{ replicas }}"
            selector:
              matchLabels:
                app: hello-py
            template:
              metadata:
                labels:
                  app: hello-py
              spec:
                containers:
                - name: hello-py
                  image: "{{ image_name }}:{{ image_tag }}"
                  imagePullPolicy: IfNotPresent
                  ports:
                  - containerPort: 8181

    - name: Create a Service for Hello Py.
      k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: hello-py
            namespace: default
          spec:
            type: LoadBalancer
            ports:
            - port: 8181
              targetPort: 8181
            selector:
              app: hello-py

  post_tasks:

    - name: exposing Hello Py on the host via Minikube.
      #command: minikube service hello-py
      #command: curl $(minikube service hello-py --url)
      command: minikube service hello-py --url
      changed_when: false
      register: minikube_service

    - debug:
        msg: "Hello Py URL: {{ minikube_service['stdout_lines'][0] }}"

    - name: verify Hello Py is responding.
      uri:
        url: "{{ minikube_service['stdout_lines'][0] }}/"
        return_content: true
      register: hello_py_response
      failed_when: "'Hello' not in hello_py_response.content"

    - debug:
        msg: "Testing URL Hello Py Requested: {{hello_py_response.content}} Status: {{hello_py_response.status}}"
